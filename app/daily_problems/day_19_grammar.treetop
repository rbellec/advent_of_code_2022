grammar BluePrints
  rule blueprints
    (blueprint sp)+ {
      def blueprints
        elements.map{|element| bp = element.blueprint.blueprint; [bp[:blueprint], bp]}.to_h
      end
    }
  end

  rule blueprint
    'Blueprint' sp number sp ':' sp robot_blueprints:(robot_blueprint+) {
      def blueprint
        costs = robot_blueprints.elements.map{ |robot_cost| robot_cost.robot_blueprint}
        costs_hash = {}.merge(*costs)
        {blueprint: number.text_value.to_i, definition: costs_hash}
      end
    }
  end

  rule robot_blueprint
    sp 'Each' sp material sp 'robot costs' sp first_cost:cost rest_costs:( sp 'and' sp cost)* '.' {
      def robot_blueprint
        # Here we could built an object. I stick with hashes since I am way over my "allowed" time.
        agregated_cost = first_cost.cost_hash
        rest_costs.elements.each do |element|
          agregated_cost.merge!(element.cost.cost_hash)
        end

        {material.as_symbol => agregated_cost}
      end
    }
  end

  rule cost
    number sp material {
      def cost_hash
        {material.as_symbol => number.text_value.to_i}
      end
    }
  end

  rule number
    [0-9]+
  end

  rule material
    ('ore' / 'clay' / 'obsidian' / 'geode') {
      def as_symbol
        text_value.to_sym
      end
    }
  end

  rule sp
    [ \n\t]*
  end
end
